Function New-OHScheduledTask {
    <#
    .SYNOPSIS
    Creates a new scheduled task to run a PowerShell script with a trigger, a specific user account, and other options.
    
    .DESCRIPTION
    The New-OHScheduledTask function creates a new scheduled task to run a PowerShell script with a specific trigger, a specific user account, and other options. You can choose to run the task at logon or startup and allow only specific users to run the task. You can also choose to run the task with the highest privileges, start the task immediately after registration, and delay the task for a specific time. If the task already exists, you can replace or delete it.
    
    .PARAMETER TaskName
    The name of the scheduled task. If not specified, the function uses the leaf name of the script path.
    
    .PARAMETER TaskDescription
    The description of the scheduled task. Default value is "Runs a PowerShell script."
    
    .PARAMETER Trigger
    The trigger for the scheduled task. Valid values are "AtLogon" or "AtStartup."
    
    .PARAMETER AllowedUser
    The user account that is allowed to run the scheduled task. Valid values are "BUILTIN\Users" or "NT AUTHORITY\SYSTEM."
    
    .PARAMETER ScriptPath
    The path to the PowerShell script file. The path must end with ".ps1".
    
    .PARAMETER Action
    The action to perform. Valid values are "Add", "Replace", or "Delete."
    
    .PARAMETER DelayTask
    The delay time for the scheduled task. Valid values are "30s", "1m", "30m", or "1h."
    
    .PARAMETER TaskFolder
    The folder for the scheduled task. Default value is "OHTesting".
    
    .PARAMETER RunWithHighestPrivilege
    If specified, the task runs with the highest privileges.
    
    .PARAMETER StartTaskImmediately
    If specified, the task starts immediately after registration.
    
    .EXAMPLE
    New-OHScheduledTask -TaskName "My Task" -Trigger "AtLogon" -AllowedUser "BUILTIN\Users" -ScriptPath "C:\Scripts\MyScript.ps1" -Action "Add" -TaskFolder "MyFolder" -RunWithHighestPrivilege -StartTaskImmediately
    This example creates a new scheduled task named "My Task" that runs the script "C:\Scripts\MyScript.ps1" at logon for the "BUILTIN\Users" user account. The task is created in the folder "MyFolder" and runs with the highest privileges. The task also starts immediately after registration.
    
    .NOTES
    The function requires PowerShell version 3.0 or later.
    By: owen.heaume
    Date: 05-May-2023
    Version: 1.5
    #>
    
    [CmdletBinding(SupportsShouldProcess = $true)]
    param(
        [Parameter()]
        [string]$TaskName,
    
        [Parameter()]
        [string]$TaskDescription = "Runs a PowerShell script.",
    
        [Parameter(Mandatory = $true)]
        [ValidateSet('AtLogon', 'AtStartup')]
        [string]$Trigger,
    
        [Parameter(Mandatory = $true)]
        [ValidateSet('BUILTIN\Users', 'NT AUTHORITY\SYSTEM')]
        [string]$AllowedUser,
    
        [Parameter(Mandatory = $true)]
        [ValidateScript({ $_ -match '\.ps1$' })]
        [string]$ScriptPath,
    
        [Parameter(Mandatory = $true)]
        [ValidateSet('add', 'replace', 'delete')]
        [string]$Action,
    
        [Parameter()]
        [ValidateSet('30s', '1m', '30m', '1h')]
        [string]$DelayTask,
    
        [Parameter()]
        [string]$TaskFolder = "OHTesting",
    
        [Parameter()]
        [switch]$RunWithHighestPrivilege,
    
        [Parameter()]
        [switch]$StartTaskImmediately
    )
    
    if (!(Test-Path $ScriptPath)) {
        Write-host "Script path not found: $ScriptPath" -ForegroundColor Yellow
        return
    }
    
    # If a -TaskName was not used, then get the leaf name of the script path to use instead
    if ($TaskName -eq "") {
        $TaskName = $(Split-Path $ScriptPath -Leaf -Resolve).Replace('.ps1', "")
    }
    
    # If the action is "delete" or "replace," then delete the task if it already exists (by task name)
    if ($Action -eq "Delete" -or $Action -eq "Replace") {
        Try {
            if (Get-ScheduledTask -TaskName $TaskName -ErrorAction Stop) {
                Unregister-ScheduledTask -TaskName $TaskName -Confirm:$false
                Write-Host "Removed Scheduled Task $taskname" -ForegroundColor Green
            }
        }
        Catch {
            Write-Host "$TaskName not found. No task to delete" -ForegroundColor Cyan        
        }
    }
    
    # If the action is "add" or "replace," then check if the task already exists
    if ($Action -eq "Add" -or $Action -eq "Replace") {
        if (!(Get-ScheduledTask -TaskName $TaskName -ErrorAction SilentlyContinue)) {  
    
            # Task action
            $taskAction = New-ScheduledTaskAction -Execute 'powershell.exe' -Argument "-File `"$ScriptPath`""
    
            # Task Trigger
            switch ($trigger) {
                'AtStartup' { $taskTrigger = New-ScheduledTaskTrigger -AtStartup }
                'AtLogon' { $taskTrigger = New-ScheduledTaskTrigger -AtLogOn }
            }
    
            # Task principal
            $taskPrincipal = New-ScheduledTaskPrincipal -GroupId $AllowedUser
    
            # task settings
            $taskSettings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -WakeToRun
            if ($RunWithHighestPrivilege) {
                $taskSettings.ExecutionTimeLimit = 'PT0S'
                $taskSettings.RunOnlyIfNetworkAvailable = $false
                $taskSettings.Hidden = $false
                $taskSettings.Priority = 7
            }
    
            # Add a task delay if selected
            if ($DelayTask) {
                $taskDelay = New-TimeSpan -Seconds 1
                switch ($DelayTask) {
                    '30s' { $taskDelay = New-TimeSpan -Seconds 30 }
                    '1m' { $taskDelay = New-TimeSpan -Minutes 1 }
                    '30m' { $taskDelay = New-TimeSpan -Minutes 30 }
                    '1h' { $taskDelay = New-TimeSpan -Hours 1 }
                }
                $delayTime = "PT" + $taskDelay.ToString('hh') + "H" + $taskDelay.ToString('mm') + "M" + $taskDelay.ToString('ss') + "S"
                $taskTrigger.Delay = $delayTime
            }
    
            # Run with highest privileges if selected
            if ($RunWithHighestPrivilege) {
                $taskPrincipal.RunLevel = "Highest"
            }
            else {
                $taskPrincipal.RunLevel = "Limited"
            }
    
            # Register the new PowerShell scheduled task
            Register-ScheduledTask `
                -TaskName $TaskName `
                -Action $taskAction `
                -Trigger $taskTrigger `
                -Principal $taskPrincipal `
                -Description $TaskDescription `
                -TaskPath "\$taskFolder"
    
            # Verify the task has been registered
            try {
                if ($(Get-ScheduledTask -TaskName $TaskName -ErrorAction stop -ev x).TaskName -eq $TaskName) {
                    write-host "Task registered successfully!" -ForegroundColor Green
                    # If the switch has been used, then start the task straight away
                    if ($StartTaskImmediately) {
                        Write-host "Starting the task immediately." -ForegroundColor Cyan
                        Start-ScheduledTask -TaskName $TaskName -TaskPath "\$taskFolder"
                    }
                }
            }
            catch {
                Write-Warning "The task was not registered"
                $x
                exit
            } 
        }
        else {
            Write-Host "Scheduled Task $taskname already exists so taking no action" -ForegroundColor Yellow
        }
    }   
}
    